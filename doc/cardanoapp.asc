Cardano SL application : Common Technical Specifications
=======================================================
Ledger Firmware Team <hello@ledger.fr>
Application version 0.1 - 28th of February 2018
Forked from ledger's SSH/PGP Agent - blue-app-ssh-agent
HiddenField Team <info@hiddenfield.com>

== RC v0.1

  - Release Candidate for initial integration by Daedalus Wallet team and Cardano SL Extended Web API.

== About

This application describes the APDU messages interface to communicate with the Cardano Ledger App.

The application covers the following functionalities :

  - Get 32 byte public key from BIP 32 index, i.e. 44' / 1815' / 0' / [INDEX] or Get wallet 64 byte passphrase
  - Set Tx. CBOR decodes transaction's inputs and outputs and then hashes Tx using Blake2b-256.
  - Sign Tx. Signs the current hashed Tx using the keys derived from the provided index, i.e. 44' / 1815' / 0' / [INDEX]
  - Get App Info - Returns the apps Major, Minor and Patch numbering to the client.

The application interface can be accessed over HID

== General purpose APDUs

=== GET PUBLIC KEY

==== Description

This command returns the public key for the given BIP 32 index following user confirmation.
Input is the index associated with the current device seed, i.e. 44'/ 1815'/ 0' /[INDEX]'.

  - P1 == 0x01 == P1_RECOVERY_PASSPHRASE - Returns the Wallet Recovery Passphrase. Public key at index 44' / 1815' + 32 Byte Chain Code.
  - P1 == 0x02 == P1_ADDRESS_PUB_KEY - Returns the 32 byte public key only.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*
|   80  |   01   |  01 :              |  00        |    4     |   0
|   80  |   01   |  02 :              |  00        |    4     |   4
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Index Length                                                                      | 4
| Index : > 0x80000000   if P1:02 is used                                           | 4
|==============================================================================================================================

'Output data: P1 == P1_RECOVERY_PASSPHRASE'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | 32
| Chain Code                                                                        | 32
|==============================================================================================================================

'Output data: P1 == P1_ADDRESS_PUB_KEY'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | 32
|==============================================================================================================================



=== SET TX

==== Description

- This command sets and returns the breakdown of the decoded CBOR found in a passed in transaction.
- These values are displayed to the user for transaction confirmation.
- The next command to follow a SET TX has to be a SIGN TX, otherwise the data ejected and state is reset.
- The UI is left with a 'Signing...' message until all input indexes have been passed to the SIGN TX command.
- Running this command with a headless build will bypass the user UI confirmation and not set the 'Signing...' screen.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*               | *Lc*     | *Le*
|   80  |   02   |  01 : FIRST APDU   |  00 : P2_SINGLE_TX |    4     |  var
|   80  |   02   |  02 : NEXT  APDU   |  02 : P2_MULTI_TX  |    4     |  var
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Tx Length                                                                         | 4
| Tx Data                                                                           | var : max 56
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of inputs                                                                  | 1
| Number of outputs                                                                 | 1
| Output amount                                                                     | 64 * Output Count (MAX 6)
| Output truncated address                                                          | 14 * Output Count (MAX 6)
|==============================================================================================================================



=== SIGN TX

==== Description

- This command signs the currently set transaction with the private key derived from the passed in index.
- The command must be run X number of times before the 'signing...' message is cleared from the device display.
- X being the number of inputs parsed from the Tx CBOR decoding.
- Running this command with a headless build will bypass the 'signing...' removal.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*               | *Lc*     | *Le*
|   80  |   03   |  00                |  00                |    4     |  4
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Index Length                                                                      | 4
| Index : > 0x80000000                                                              | 4
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Digest                                                                            | 8
|==============================================================================================================================


=== APP INFO

==== Description

- This command returns the App's version number.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*               | *Lc*     | *Le*
|   80  |   04   |  00                |  00                |    4     |  0
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Length                                                                            | 4 : Set to 0
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Major                                                                             | 1
| Minor                                                                             | 1
| Patch                                                                             | 1
|==============================================================================================================================


== Transport protocol

=== General transport description

Ledger APDUs requests and responses are encapsulated using a flexible protocol allowing to fragment large payloads over different underlying transport mechanisms.

The common transport header is defined as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Communication channel ID (big endian)                                             | 2
| Command tag                                                                       | 1
| Packet sequence index (big endian)                                                | 2
| Payload                                                                           | var
|==============================================================================================================================

The Communication channel ID allows commands multiplexing over the same physical link. It is not used for the time being, and should be set to 0101 to avoid compatibility issues with implementations ignoring a leading 00 byte.

The Command tag describes the message content. Use TAG_APDU (0x05) for standard APDU payloads, or TAG_PING (0x02) for a simple link test.

The Packet sequence index describes the current sequence for fragmented payloads. The first fragment index is 0x00.

=== APDU Command payload encoding

APDU Command payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU length (big endian)                                                          | 2
| APDU CLA                                                                          | 1
| APDU INS                                                                          | 1
| APDU P1                                                                           | 1
| APDU P2                                                                           | 1
| APDU length                                                                       | 4
| Optional APDU data                                                                | var
|==============================================================================================================================

APDU payload is encoded according to the APDU case

[width="80%"]
|=======================================================================================
| Case Number  | *Lc* | *Le* | Case description
|   1          |  0   |  0   | No data in either direction - L is set to 00
|   2          |  0   |  !0  | Input Data present, no Output Data - L is set to Lc
|   3          |  !0  |  0   | Output Data present, no Input Data - L is set to Le
|   4          |  !0  |  !0  | Both Input and Output Data are present - L is set to Lc
|=======================================================================================

=== APDU Response payload encoding

APDU Response payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU response length (big endian)                                                 | 2
| APDU response data and Status Word                                                | var
|==============================================================================================================================

=== USB mapping

Messages are exchanged with the dongle over HID endpoints over interrupt transfers, with each chunk being 64 bytes long. The HID Report ID is ignored.

== Status Words

The following standard Status Words are returned for all APDUs - some specific Status Words can be used for specific commands and are mentioned in the command description.

'Status Words'

[width="80%"]
|===============================================================================================
|   *SW*   | *Description*
|   5xxx   | Application error codes
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Canceled by user)
|   6A80   | Invalid data
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (Internal error, please report)
|   9000   | Normal ending of the command
|   9001   | Security status not satisfied (Canceled by user)
|================================================================================================
